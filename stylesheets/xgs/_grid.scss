// X Grid System

@import 'compass/utilities/general/float';
@import 'compass/utilities/general/clearfix';

// @var String development|production The XGS environment.
$xgs-environment : compass-env() !default;

// @var Boolean Whether to show element's outline.
$xgs-show-outline: $xgs-environment == development !default;
// @var Color The width of element's outline.
$xgs-outline-width              : 1px !default;
// @var Color The style of element's outline.
$xgs-outline-style              : solid !default;
// @var Color The color of element's outline.
$xgs-outline-color              : #dccd6e !default;
// @var Number The alpha value of element's outline.
$xgs-outline-alpha              : 1.0 !default;
// @var Color The background color of element's outline.
$xgs-outline-background-color   : #f6e67c !default;
// @var Number The background alpha of element's outline.
$xgs-outline-background-alpha   : .25 !default;

// @var Number The number of columns.
$xgs-columns     : 12 !default;
// @var Number The width of a column.
$xgs-column-width: 54px !default;
// @var Number The amount of margin between columns.
$xgs-gutter-width: 30px !default;
// @var Boolean Whether to use the fluid grid system.
$xgs-fluid       : false !default;

// Mixin: Generates non-semantic classes for the grid system.
//
// @param Boolean $xgs-fluid Whether to use the fluid grid system.
@mixin xgs-grid($fluid: $xgs-fluid) {
    & {
        width: xgs-container-width($fluid);
        margin: auto;
        // IE6 (Quirks mode) cannot center block-level elements by 'margin: auto;'.
        // You need add 'text-align: center;' into a rule set for parent element.
        @if $legacy-support-for-ie6 {
            text-align: left;
        }
        &, .row {
            @include xgs-row;
        }
        & .column {
            @include xgs-column-base;
            &:first-child {
                @include xgs-first;
            }
            @include xgs-element-outline;
        }
        @for $n from 1 to $xgs-columns {
            & .unit-#{$n} {
                width: xgs-unit($n);
            }
            & .column-#{$n} {
                @extend .column;
                @extend .unit-#{$n};
            }
        }
        & .unit-#{$xgs-columns} {
            width: xgs-unit($xgs-columns);
        }
        & .column-#{$xgs-columns} {
            @extend .column;
            @extend .unit-#{$xgs-columns};
            @extend .first;
        }
        & .first {
            @include xgs-first;
        }
        & #{enumerate('.push', 1, $xgs-columns - 1)} {
            @include xgs-push-base;
        }
        & #{enumerate('.pull', 1, $xgs-columns - 1)} {
            @include xgs-pull-base;
        }
        @for $n from 1 to $xgs-columns {
            & .prepend-#{$n} {
                @include xgs-prepend($n);
            }
        }
        @for $n from 1 to $xgs-columns {
            & .append-#{$n} {
                @include xgs-append($n);
            }
        }
        @for $n from 1 to $xgs-columns {
            & .push-#{$n} {
                @include xgs-push-margin($n);
            }
        }
        @for $n from 1 to $xgs-columns {
            & .pull-#{$n} {
                @include xgs-pull-margin($n);
            }
        }
    }
}

// Function: Returns the width of the container.
//
// @param Boolean $xgs-fluid Whether to use the fluid grid system.
@function xgs-container-width($fluid: $xgs-fluid) {
    @if $fluid {
        @return 100%;
    }
    @else {
        @return $xgs-column-width * $xgs-columns + $xgs-gutter-width * ($xgs-columns - 1);
    }
}

// Mixin: The declarations to show element's outline.
@mixin xgs-element-outline {
    @if $xgs-show-outline {
        outline: $xgs-outline-width $xgs-outline-style $xgs-outline-color;
        @if $xgs-outline-alpha < 1.0 {
            outline: $xgs-outline-width $xgs-outline-style rgba($xgs-outline-color, $xgs-outline-alpha);
        }
        background-color: $xgs-outline-background-color;
        @if $xgs-outline-background-alpha < 1.0 {
            background-color: rgba($xgs-outline-background-color, $xgs-outline-background-alpha);
        }
    }
}

// Mixin: The declarations for the container.
//
// @param Boolean $xgs-fluid Whether to use the fluid grid system.
@mixin xgs-container($fluid: $xgs-fluid) {
    width: xgs-container-width($fluid);
    margin: auto;
    @include xgs-row;
    // IE6 (Quirks mode) cannot center block-level elements by 'margin: auto;'.
    // You need add 'text-align: center;' into a rule set for parent element.
    @if $legacy-support-for-ie6 {
        text-align: left;
    }
}

// Mixin: The declarations for element to group columns.
@mixin xgs-row {
    @include clearfix;
}

// Mixin: The declarations for the first column in a row.
@mixin xgs-first {
    margin-left: 0;
    clear: both;
}

// Mixin: The base declarations for columns.
//
// @param Boolean $first Whether the column is the first column in a row.
@mixin xgs-column-base($first: false) {
    position: relative;
    @include float-left;
    @if $first {
        @include xgs-first;
    }
    @else {
        margin-left: $xgs-gutter-width;
    }
}

// Function: Returns the width of 'n' columns.
//
// @param Number $n The number of columns.
@function xgs-unit($n) {
    @return $xgs-column-width * $n + $xgs-gutter-width * ($n - 1);
}

// Mixin: The declarations for a column.
//
// @param Number  $n     The number of columns.
// @param Boolean $first Whether the column is the first column in a row.
@mixin xgs-column($n, $first: false) {
    @include xgs-column-base($first);
    width: xgs-unit($n);
}

// Mixin: The base declarations to push an element to the right.
@mixin xgs-push-base {
    position: relative;
}

// Mixin: The amount of the margin to push an element to the right.
//
// @param Number $n The number of columns.
@mixin xgs-push-margin($n) {
    left: $xgs-column-width * $n + $xgs-gutter-width * $n;
}

// Mixin: Moves an element to the 'n' columns right.
//
// @param Number $n The number of columns.
@mixin xgs-push($n) {
    @include xgs-push-base;
    @include xgs-push-margin($n);
}

// Mixin: The base declarations to pull an element to the left.
@mixin xgs-pull-base {
    position: relative;
}

// Mixin: The amount of the margin to push an element to the left.
//
// @param Number $n The number of columns.
@mixin xgs-pull-margin($n) {
    left: -$xgs-column-width * $n + -$xgs-gutter-width * $n;
}

// Mixin: Moves an element to the 'n' columns left.
//
// @param Number $n The number of columns.
@mixin xgs-pull($n) {
    @include xgs-pull-base;
    @include xgs-pull-margin($n);
}

// Mixin: Prepends 'n' empty columns to the left.
//
// @param Number $n The number of columns.
@mixin xgs-prepend($n) {
    padding-left: $xgs-column-width * $n + $xgs-gutter-width * $n;
}

// Mixin: Prepends 'n' empty columns to the right.
//
// @param Number $n The number of columns.
@mixin xgs-append($n) {
    padding-right: $xgs-column-width * $n + $xgs-gutter-width * $n;
}
